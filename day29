#selection sort

'''def swap(num_list, first_index, second_index):
    temp=num_list[first_index]
    num_list[first_index]=num_list[second_index]
    num_list[second_index]=temp

def find_next_min(num_list,start_index):
    mini = min(num_list[start_index::])
    return num_list.index(mini)

def selection_sort(num_list):
    for i in range(len(num_list)):
        index = find_next_min(num_list, i)
        swap(num_list, i,index)

num_list=[8,2,19,34,23, 67, 91]
print("Before sorting;",num_list)
selection_sort(num_list)
print("After sorting:",num_list)'''

#bubble sort

'''def swap(num_list, first_index, second_index):
    temp=num_list[first_index]
    num_list[first_index]=num_list[second_index]
    num_list[second_index]=temp

def bubble_sort(num_list):
    total_pass=0
    end_index=len(num_list)
    for index1 in range(0,end_index-1):
        swapped=False
        total_pass+=1
        for index2 in range(0,(end_index-index1-1)):
            if num_list[index2] > num_list[index2+1]:
                swap(num_list,index2,index2+1)
                swapped=True
        if (swapped==False):
            break
    return total_pass

num_list=[-2,45,0,11,-9]
print("no of passes:",bubble_sort(num_list))
print(num_list)'''

#merge sort

'''def merge_sort(num_list):
    low=0
    high=len(num_list)-1
    if low==high:
        return num_list
    else:
        left_list=num_list[:len(num_list)//2]
        right_list=num_list[len(num_list)//2:]
        list1=merge_sort(left_list)
        list2=merge_sort(right_list)
        sorted_list=merge(list1,list2)
        return sorted_list

def merge(left_list,right_list):
    i,j=0,0
    sorted_list=[]
    while (i<len(left_list) and j<len(right_list)):
        if left_list[i]<=right_list[j]:
            sorted_list.append(left_list[i])
            i+=1
        else:
            sorted_list.append(right_list[j])
            j+=1
    if i<len(left_list):
        sorted_list.extend(left_list[i::])
    if j<len(right_list):
        sorted_list.extend(right_list[j::])
    return sorted_list

num_list=[6,5,12,10,9,1]
ssorted_list=merge_sort(num_list)
print(ssorted_list)'''

#quick sort

'''def swap(num_list, first_index, second_index):
    temp=num_list[first_index]
    num_list[first_index]=num_list[second_index]
    num_list[second_index]=temp

def quick_sort(num_list,low,high):
    if low>=high:
        return 
    split_point=partition(num_list,low,high)
    quick_sort(num_list,low,split_point-1)
    quick_sort(num_list,split_point+1,high)

def partition(num_list,low,high):
    pivot=num_list[low]
    i=low+1
    j=high
    done=False
    while not done:
        while(i<=j and num_list[i]<=pivot):
            i+=1
        while(num_list[j]>=pivot and j>=i):
            j-=1
        if j<i:
            done=True
        else:
            swap(num_list,i,j)
    swap(num_list,low,j)
    return j

num_list=[8,7,6,1,0,9,2]
l=len(num_list)
quick_sort(num_list,0,l-1)
print(num_list)'''


'''library a3'''

class Item:
    def __init__(self,item_name,author_name,published_year):
        self.__item_name=item_name
        self.__author_name=author_name
        self.__published_year=published_year

    def get_item_name(self):
        return self.__item_name

    def get_author_name(self):
        return self.__author_name

    def get_published_year(self):
        return self.__published_year

    def __str__(self):
        return "{} by {} published in {}".format(self.__item_name,self.__author_name,self.__published_year)

class Library:
    def __init__(self,item_list):
        self.__item_list=item_list

    def get_item_list(self):
        return self.__item_list

    def sort_item_list_by_author(self,new_item_list):
        new_item_list.sort(key=lambda x:''.join(e for e in x.get_author_name() if e.isalnum()))
        return new_item_list

    def add_new_items(self,new_item_list):
        self.__item_list.extend(new_item_list)
        self.sort_item_list_by_author(self.__item_list)

    def sort_items_by_published_year(self):
        self.sort_item_list_by_author(self.__item_list)
        self.__item_list.sort(key=lambda x:x.get_published_year())

item1=Item("A Mission In Kashmir","Andrew Whitehead",1995)
item2=Item("A Passage of India","E.M.Forster",2012)
item3=Item("A new deal for Asia","Mahathir Mohammad",1999)
item4=Item("A Voice of Freedom","Nayantara Sehgal",2001)
item5=Item("A pair of blue eyes","Thomas Hardy",1998 )

item_list=[item1,item2,item3,item4,item5]
library=Library(item_list)
print("The current items in the library are:")
for item in library.get_item_list():
    print(item)

item11=Item("Broken Wing","Sarojini Naidu",2012)
item12=Item("Guide","R.K.Narayanan",2001)
item13=Item("Indian Summers","John Mathews",2001)
item14=Item("Innocent in Death","J.D.Robb",2010)
item15=Item("Life of Pi","Yann Martel",2010 )
item16=Item("Sustainability","Johny",2016)
item17=Item("Look Ahead","E.M.Freddy",2012 )

new_item_list=[item11,item12,item13,item14,item15,item16,item17]
print()
print("The new items to be added are:")
for item in new_item_list:
    print(item)

new_item_list_sorted=library.sort_item_list_by_author(new_item_list)
print()
print("The new items after sorting based on the author name are:")
for item in new_item_list_sorted:
    print(item)

library.add_new_items(new_item_list_sorted)
print()
print("The final set of items after adding the new item list are:")
for item in library.get_item_list():
    print(item)

library.sort_items_by_published_year()
print()
print("The items sorted based on the increasing order of their published year:")
for item in library.get_item_list():
    print(item)

'''
Royal Orchid is a florist. They want to be alerted when stock of a flower goes below a particular level. 
The flowers are identified using name, price per kg and stock available (in kgs).
Write a Python program to implement the above requirement.
Details of Flower class are given below:
Class name: Flower

Attributes
(private)                  flower_name
                           price_per_kg
                           stock_available	 
Methods
(public)	

__init__()	                        Create and initialize all instance variables to None

validate_flower()	                Return true, if flower name is valid. Else, return false
                                     (Refer table for valid flower names)

validate_stock(required_quantity)	Accept the quantity required. Return true, if stock is available.
                                      Else return false.

sell_flower(required_quantity)	    Accept the quantity required.
                                    Validate flower name and stock.
                                    If both are valid, update stock available based on the quantity required

check_level()	                    Check if available stock is below the order level
                                    If so, return true. Else, return false
                                    (Refer table for order level of each flower)

setter methods	                    Include setter methods for all instance variables to set its values
getter methods	                    Include getter methods for all instance variables to get its values
 
 
Flower Name	  Level(in Kgs)
Orchid	        15
Rose	        25
Jasmine	        40
Note: Perform case insensitive string comparison
Represent few flowers, initialize instance variables using setter methods, invoke appropriate methods and test your program.

'''


flowers=["Orchid","Rose","Jasmine"]
levels=[15,25,40]

class Flower:
    def __init__(self):
        self.__flower_name=None
        self.__price_per_kg=None
        self.__stock_available=None

    def validate_flower(self):
        if self.__flower_name in flowers:
           return True 
        else:
            return False

    def validate_stock(self,required_quanity):
        if self.__stock_available>= required_quanity:
            return True
        else:
            return False

    def sell_flower(self,required_quantity):
        if self.validate_flower() and self.validate_stock(required_quantity):
           self.__stock_available-=required_quantity
           return True #print(self.__stock_available)
        else:
            return False
    
    def check_level(self):
        if self.validate_flower():
            flower_level=levels[flowers.index(self.__flower_name)]
            if self.__stock_available<flower_level:
                return True
        else:
            return False

    def set_flower_name(self,flower_name):
        self.__flower_name=flower_name

    def get_flower_name(self):
        return self.__flower_name

    def set_price_per_kg(self,price_per_kg):
        self.__price_per_kg=price_per_kg

    def get_price_per_kg(self):
        return self.__price_per_kg

    def set_stock_available(self,stock_available):
        self.__stock_available=stock_available

    def get_stock_available(self):
        return self.__stock_available

f=Flower()
f.set_flower_name("Rose")
f.set_price_per_kg(200)
f.set_stock_available(24)

print(f.get_flower_name())
print(f.get_price_per_kg())
print(f.get_stock_available())
print(f.sell_flower(20))
print(f.check_level())


'''
Care hospital wants to calculate the bill amount to be paid by patients visiting the hospital. 
Bill amount includes consultation fees and price of medicines purchased from their pharmacy.

Write a Python program to implement the class diagram given below.

                                                                            
Method description:

calculate_bill_amount(consultation_fees, quantity_list, price_list): 
Accept consultation_fees, quantity_list (quantities of medicines purchased) and price_list (price per quantity of medicines purchased)

Calculate total bill amount to be paid by the patient. Bill amount includes consultation fees and price of medicines
Initialize attribute, bill_amount with the total bill amount
Note: quantity_list and price_list have one-to-one correspondence. 
Quantity and price per quantity of 1st medicine purchased by the patient is present at 0th index of both lists, 
2nd medicine is present at 1st index and so on.

For testing:

Create objects of Bill class
Invoke calculate_bill_amount(consultation_fees, quantity_list, price_list) method on Bill object by passing consultation fees, 
quantity list and price list
Display bill id, patient name and bill amount
'''    

class Bill:
    def __init__(self,bill_id,patient_name):
        self.__bill_id=bill_id
        self.__patient_name=patient_name
        self.__bill_amount=0

    def get_bill_id(self):
        return self.__bill_id

    def get_patient_name(self):
        return self.__patient_name

    def get_bill_amount(self):
        return self.__bill_amount

    def calculate_bill(self,consultation_fees, quantity_list, price_list):
        for i in range(len(quantity_list)):
            self.__bill_amount+=(quantity_list[i]*price_list[i])
        self.__bill_amount+=consultation_fees

b=Bill(100,"ABC")
print(b.get_patient_name())
print(b.get_bill_id()) 
b.calculate_bill(500,[1,2],[20,30])
print(b.get_bill_amount())

'''
Given a stack of integers, write a python program that updates the input stack 
such that all occurrences of the smallest values are at the bottom of the stack, 
while the order of the other elements remains the same.

For example:
Input stack (top-bottom) :   5 66  5  8  7
Output:  66  8  7  5  5

'''

class Stack:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*max_size
        self.__top=-1

    def get_max_size(self):
        return self.__max_size

    def full(self):
        if self.__top==self.__max_size-1:
            return True
        else:
            return False

    def push(self,data):
        if self.full():
            print("overflow")
        else:
            self.__top+=1
            self.__elements[self.__top]=data

    def empty(self):
        if self.__top==-1:
            return True
        else:
            return False

    def pop(self):
        if self.empty():
            print("underflow")
        else:
            data=self.__elements[self.__top]
            self.__top-=1
            return data

    def display(self):
        if self.empty():
            print("the stack is empty")
        else:
            index=self.__top
            while(index>=0):
                print(self.__elements[index])
                index-=1

def smallest_value(number_stack):
    l=[]
    while(not number_stack.empty()):
        l.append(number_stack.pop())
    minimum=min(l)
    counter=l.count(min(l))
    for i in range(counter):
        number_stack.push(minimum)
    for element in l[::-1]:
        if element!=minimum:
            number_stack.push(element)
    return number_stack

number_stack=Stack(5)
number_stack.push(7)
number_stack.push(8)
number_stack.push(5)
number_stack.push(66)
number_stack.push(5)
print("initial stack")
number_stack.display()
smallest_value(number_stack)
print("after the change")
number_stack.display()



#queue

class Queue:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*max_size
        self.__rear=-1
        self.__front=0

    def get_max_size(self):
        return self.__max_size

    def full(self):
        if self.__rear==self.__max_size-1:
            return True
        else:
            return False

    def enqueue(self,data):
        if self.full():
            print("overflow")
        else:
            self.__rear+=1
            self.__elements[self.__rear]=data

    def empty(self):
        if self.__front>self.__rear:
            return True
        else:
            return False

    def dequeue(self):
        if self.empty():
            print("underflow")
        else:
            data=self.__elements[self.__front]
            self.__front+=1
            return data

    def display(self):
        for index in range(self.__front,self.__rear+1):
            print(self.__elements[index])

q=Queue(5)
q.enqueue("a")
q.enqueue("b")
print("initial queue")
q.display()
q.dequeue()
print("updated queue")
q.display()

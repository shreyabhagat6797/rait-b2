#polymorphism
'''same function but used in different types'''
condidtion of occurrence in different forms refers to the use of single type entity to represent different types in different scenarios

print(len("python"))
print(len(["python","java","c"]))
print(len({"name":"python","language":"moderate"}))


num1=4
num2=5
print(num1+num2)

str1="python"
str2="language"
print(str1+" "+str2)


class Cat:
    def __init__(self,name,age):
        self.name=name
        self.age=age

    def info(self):
        print(f"I am cat.My name is {self.name}.I am {self.age} years old")

class Dog:
    def __init__(self,name,age):
        self.name=name
        self.age=age

    def info(self):
        print(f"I am dog.My name is {self.name}.I am {self.age} years old")

c=Cat("kitty",2)
d=Dog("brucy",4)

for animal in (c,d):
    animal.info()
    

#encapsulation

Describes the idea of  wrapping data and methods that works on data within one unit
It puts restructions on accessing the variables & methods & can prevent accidental modification

private: objct's variable can only be changed by an oject's method()

protected: calling protected members of base class

class Computer:
    def __init__(self):
        self.__maxprice=400

    def sell(self):
        print("selling price is {}".format(self.__maxprice))

    def set_maxprice(self,price):
        self.__maxprice=price

c=Computer()
c.sell()

c.__maxprice=500
c.sell()

c.set_maxprice(500)
c.sell()

#abstraction

It is used to hide irrelevant data/class in order to reduce the complexity and enhancement of application efficiency

#from abc import abstractmethod
ABC is Abstract Base Class.
ABC is module name


from abc import ABC, abstractmethod   
class Car(ABC):   
    @abstractmethod
    def mileage(self):   
        pass  
  
class Tesla(Car):   
    def mileage(self):   
        print("The mileage is 30kmph")   
class Suzuki(Car):   
    def mileage(self):   
        print("The mileage is 25kmph ")   
class Duster(Car):   
     def mileage(self):   
          print("The mileage is 24kmph ")   

t= Tesla ()   
t.mileage()   
  
r = Renault()   
r.mileage()   
  
s = Suzuki()   
s.mileage() 

d = Duster()   
d.mileage() 


TechWorld, a technology training center, wants to allocate courses for instructors.
An instructor is identified by name, technology skills, experience and average feedback.
An instructor is allocated a course, if he/she satisfies the below two conditions:
•	eligibility criteria:
•	if experience is more than 3 years, average feedback should be 4.5 or more
•	if experience is 3 years or less, average feedback should be 4 or more
•	he/she should posses the technology skill for the course
Identify the class name and attributes from the list of options below to represent instructors.
•	check_eligibility()
•	avg_feedback
•	experience
•	instructor_name
•	allocate_course()
•	allocate_course(technolody)
•	__init__()
•	Instructor
•	calculate_avg_feedback()
•	technology_skill
Write a Python program to implement the class chosen with its attributes and methods.
Note:
1.	Consider all instance variables to be private and methods to be public
2.	An instructor may have multiple technology skills, so consider instance variable, technology_skill to be a list
3.	check_eligibility(): Return true if eligibility criteria is satisfied by the instructor. Else, return false
4.	allocate_course(technology): Return true if the course which requires the given technology can be allocated to the instructor. Else, return false
5.	Perform case sensitive string comparison
Represent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.

class Instructor:
    def __init__(self):
        self.__instructor_name=None
        self.__experience=None
        self.__avg_feedback=None
        self.__technology_skill=None
        
    def set_instructor_name(self,instructor_name):
        self.__instructor_name=instructor_name
        
    def set_experience(self,experience):
        self.__experience=experience
        
    def set_avg_feedback(self,avg_feedback):
        self.__avg_feedback=avg_feedback
        
    def set_technology_skill(self,technology_skill):
        self.__technology_skill=technology_skill
        
    def get_instructor_name(self):
        return self.__instructor_name
    
    def get_experience(self):
        return self.__experience
        
    def get_avg_feedback(self):
        return self.__avg_feedback
        
    def get_technology_skill(self):
        return self.__technology_skill
        
    def check_eligibility(self):
        if self.__experience>3 and self.__avg_feedback>=4.5:
            return True
        elif self.__experience<=3 and self.__avg_feedback>=4:
            return True
        else:
            return False
            
    def allocate_course(self,technology):
        if technology==self.__technology_skill :
            return True
        else:
            return False

i=Instructor()
i.set_avg_feedback(5)
i.set_experience(4)
print(i.check_eligibility())
